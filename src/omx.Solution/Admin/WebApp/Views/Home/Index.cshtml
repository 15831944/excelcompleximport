@{
  ViewData["Title"] = "COVID-19 Dashboard";
  ViewData["PageName"] = "intel_marketing_dashboard";
  ViewData["Category1"] = "Application";
  ViewData["Heading"] = "<i class='subheader-icon fal fa-chart-area'></i> COVID-19 <span class='fw-300'>Dashboard</span>";
}
@section HeadBlock {
  <link href="~/Content/css/formplugins/ion-rangeslider/ion-rangeslider.css" rel="stylesheet" />
  <link rel="stylesheet" media="screen, print" href="~/Content/css/datagrid/datatables/datatables.bundle.css">
  <link rel="stylesheet" media="screen, print" href="~/Content/css/notifications/sweetalert2/sweetalert2.bundle.css">

  <style>
    .custom-tooltip {
      width: 100% !important;
      height: 10% !important;
      position: absolute;
      top: 0px;
      left: 0px
    }

    .custom-tooltip-item {
      width: 150px;
      height: 50px;
      position: relative;
      float: left;
      margin-left: 20px;
      border-left-style: solid;
      border-left-width: 5px
    }

      .custom-tooltip-item:first-child {
        margin-left: 0
      }

    .custom-tooltip-item-name {
      width: 80%;
      height: 20px;
      position: absolute;
      top: 0px;
      left: 10px;
      color: rgba(0, 0, 0, 0.45);
      font-size: 14px
    }

    .custom-tooltip-item-value {
      width: 80%;
      height: 30px;
      position: absolute;
      bottom: 0px;
      left: 10px;
      color: #262626;
      font-size: 22px;
      /*font-weight: bold*/
    }
  </style>
}
@section SubheaderBlock {

}
<div class="row">
  <div class="col-sm-6 col-xl-3">
    <div class="p-3 bg-primary-300 rounded overflow-hidden position-relative text-white mb-g">
      <div class="">
        <h3 class="display-4 d-block l-h-n m-0 fw-500">
          <div id="p1"></div>
          <small class="m-0 l-h-n">全球确诊人数</small>
        </h3>
      </div>
      <i class="fal fa-user position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1" style="font-size:6rem"></i>
    </div>
  </div>
  <div class="col-sm-6 col-xl-3">
    <div class="p-3 bg-warning-400 rounded overflow-hidden position-relative text-white mb-g">
      <div class="">
        <h3 class="display-4 d-block l-h-n m-0 fw-500">
          <div id="p2"></div>
          <small class="m-0 l-h-n">全球死亡人数</small>
        </h3>
      </div>
      <i class="fal fa-gem position-absolute pos-right pos-bottom opacity-15  mb-n1 mr-n4" style="font-size: 6rem;"></i>
    </div>
  </div>
  <div class="col-sm-6 col-xl-3">
    <div class="p-3 bg-success-200 rounded overflow-hidden position-relative text-white mb-g">
      <div class="">
        <h3 class="display-4 d-block l-h-n m-0 fw-500">
          <div id="p3"></div>
          <small class="m-0 l-h-n">全球康复人数</small>
        </h3>
      </div>
      <i class="fal fa-lightbulb position-absolute pos-right pos-bottom opacity-15 mb-n5 mr-n6" style="font-size: 8rem;"></i>
    </div>
  </div>
  <div class="col-sm-6 col-xl-3">
    <div class="p-3 bg-info-200 rounded overflow-hidden position-relative text-white mb-g">
      <div class="">
        <h3 class="display-4 d-block l-h-n m-0 fw-500">
          <div id="p4"></div>
          <small class="m-0 l-h-n">感染的国家</small>
        </h3>
      </div>
      <i class="fal fa-globe position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n4" style="font-size: 6rem;"></i>
    </div>
  </div>
</div>
<div class="row">
  <div class="col-lg-12">
    <div id="panel-10" class="panel">
      <div class="panel-hdr">
        <h2>
          全球感染地区人数
        </h2>
      </div>
      <div class="panel-container show">
        <div class="panel-content bg-subtlelight-fade">
          <div id="container4" class="w-100 mt-4" style="height: 500px"></div>
          <input id="demo_12" type="text" value="" class="d-none" tabindex="-1" readonly="">
        </div>
      </div>
    </div>
  </div>
  <div class="col-lg-12">
    <div id="panel-1" class="panel">
      <div class="panel-hdr">
        <h2>
          感染最多的20个国家
        </h2>
      </div>
      <div class="panel-container show">
        <div class="panel-content bg-subtlelight-fade">
          <div id="container1" class="w-100 mt-4" style="height: 500px"></div>
          <input id="demo_9" type="text" value="" class="d-none" tabindex="-1" readonly="">
        </div>
      </div>
    </div>
  </div>
  <div class="col-lg-12">
    <div id="panel-10" class="panel">
      <div class="panel-hdr">
        <h2>
          全球感染人数
        </h2>
      </div>
      <div class="panel-container show">
        <div class="panel-content bg-subtlelight-fade">
          <div id="container2" class="w-100 mt-4" style="height: 300px"></div>
          <input id="demo_10" type="text" value="" class="d-none" tabindex="-1" readonly="">
        </div>
      </div>
    </div>
  </div>
  <div class="col-lg-12">
    <div id="panel-10" class="panel">
      <div class="panel-hdr">
        <h2>
          中国感染人数
        </h2>
      </div>
      <div class="panel-container show">
        <div class="panel-content bg-subtlelight-fade">
          <div id="container3" class="w-100 mt-4" style="height: 300px"></div>
          <input id="demo_11" type="text" value="" class="d-none" tabindex="-1" readonly="">
        </div>
      </div>
    </div>
  </div>


</div>
@section ScriptsBlock {
  <script type="text/javascript">
    /* Activate smart panels */
    $('#js-page-content').smartPanel();
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/tensorflow/1.0.0/tf.min.js" integrity="sha256-ZloML5tb+dy6G4Gp54NyqE7uG6N65abTx3Xfk1ubI1g=" crossorigin="anonymous"></script>
  @*<script src="https://unpkg.com/ml5@0.5.0/dist/ml5.min.js" type="text/javascript"></script>*@
  <script src="https://gw.alipayobjects.com/os/lib/antv/g2/4.0.5/dist/g2.min.js"></script>
  <script src="https://gw.alipayobjects.com/os/antv/pkg/_antv.data-set-0.11.1/dist/data-set.js"></script>
  @*<script src="https://unpkg.com/set-interval-async"></script>*@
  <script src="~/Scripts/dependency/moment/moment.js"></script>
  <script src="~/Scripts/datagrid/datatables/datatables.bundle.js"></script>
  <script src="~/Scripts/notifications/sweetalert2/sweetalert2.bundle.js"></script>
  <script src="~/Scripts/formplugins/ion-rangeslider/ion-rangeslider.js"></script>
  <script type="module">
   import { CountUp } from '/Scripts/plugin/countup/countUp.min.js';
    $(async () => {
      new CountUp('p1', @ViewBag.P2).start();
      new CountUp('p2', @ViewBag.P3).start();
      new CountUp('p3', @ViewBag.P4).start();
      new CountUp('p4', @ViewBag.P1).start();

    })

  </script>
  @*<script>
      let nn;

      async function setup() {
        const options = {
          debug: true,
          task: 'regression',
          layers: [
            {
              type: 'dense',
              units: 16,
              activation: 'relu'
            },
            {
              type: 'dense',
              units: 16,
              activation: 'sigmoid'
            },
            {
              type: 'dense',
              activation: 'sigmoid'
            }
          ]
        };
        nn = ml5.neuralNetwork(options);

        // add your data
        await addData();
        // normalize it
        nn.normalizeData();

        // train the model
        const training_options = {
          batchSize: 32,
          epochs: 100
        };
        nn.train(training_options, finishedTraining);
      }

      async function addData() {
        const data = await $.get(`/Covid19s/GetTrainingData`);
        data.forEach(item => {
          nn.addData(
            {
              x: parseFloat(item.confirmed),
            },
            {
              label: item.deaths
            }
          );
          console.log(item.confirmed, item.deaths)
        });
        //for (let i = 0; i < 500; i++) {
        //  let xVal, labelVal;
        //  if (i < 250) {
        //    xVal = i;
        //    labelVal = 'a';
        //  } else {
        //    xVal = i;
        //    labelVal = 'b';
        //  }
        //  const yVal = Math.random(500);
        //  console.log(yVal, xVal, labelVal)
        //  nn.addData(
        //    {
        //      x: xVal,
        //      y: yVal
        //    },
        //    {
        //      label: labelVal
        //    }
        //  );
        //}
      }

      function finishedTraining() {
        console.log('done');

        nn.predict(
          {
            x: 1846679 ,
          },
          function (err, result) {
            if (err) {
              console.log(err);
              return;
            }
            console.log('hi from callback', result);
          }
        );
      }


      setup();
    </script>*@
  @*<script>
      let callback = function (epoch, log) {
        const msg = `${epoch} : loss:${log.loss}`;
        console.log(msg, log);
      };
      function ComputeSMA(data, window_size) {
        let r_avgs = [], avg_prev = 0;
        for (let i = 0; i <= data.length - window_size; i++) {
          let curr_avg = 0.00, t = i + window_size;
          for (let k = i; k < t && k <= data.length; k++) {
            curr_avg += data[k]['price'] / window_size;
          }
          r_avgs.push({ set: data.slice(i, i + window_size), avg: curr_avg });
          avg_prev = curr_avg;
        }
        return r_avgs;
      }

      async function trainModel(inputs, outputs, trainingsize, window_size, n_epochs, learning_rate, n_layers, callback) {

        const input_layer_shape = window_size;
        const input_layer_neurons = 100;

        const rnn_input_layer_features = 10;
        const rnn_input_layer_timesteps = input_layer_neurons / rnn_input_layer_features;

        const rnn_input_shape = [rnn_input_layer_features, rnn_input_layer_timesteps];
        const rnn_output_neurons = 20;

        const rnn_batch_size = window_size;

        const output_layer_shape = rnn_output_neurons;
        const output_layer_neurons = 1;

        const model = tf.sequential();

        let X = inputs.slice(0, Math.floor(trainingsize / 100 * inputs.length));
        let Y = outputs.slice(0, Math.floor(trainingsize / 100 * outputs.length));

        const xs = tf.tensor2d(X, [X.length, X[0].length]).div(tf.scalar(10));
        const ys = tf.tensor2d(Y, [Y.length, 1]).reshape([Y.length, 1]).div(tf.scalar(10));
        console.log(X, Y)
        console.log(xs,ys)
        model.add(tf.layers.dense({ units: input_layer_neurons, inputShape: [input_layer_shape] }));
        model.add(tf.layers.reshape({ targetShape: rnn_input_shape }));

        let lstm_cells = [];
        for (let index = 0; index < n_layers; index++) {
          lstm_cells.push(tf.layers.lstmCell({ units: rnn_output_neurons }));
        }

        model.add(tf.layers.rnn({
          cell: lstm_cells,
          inputShape: rnn_input_shape,
          returnSequences: false
        }));

        model.add(tf.layers.dense({ units: output_layer_neurons, inputShape: [output_layer_shape] }));

        model.compile({
          optimizer: tf.train.adam(learning_rate),
          //optimizer: tf.train.sgd(learning_rate),
          loss:'meanSquaredError'
          //loss: 'meanSquaredError'
        });

        const hist = await model.fit(xs, ys,
          {
            batchSize: rnn_batch_size, epochs: n_epochs, callbacks: {
              onEpochEnd: async (epoch, log) => {
                callback(epoch, log);
              }
            }
          });

        return { model: model, stats: hist };
      }

      function makePredictions(inputs, size, model) {
        let X = inputs.slice(Math.floor(size / 100 * inputs.length), inputs.length);
        console.log(X)
        const predictedResults = model.predict(tf.tensor2d(X, [X.length, X[0].length]).div(tf.scalar(10))).mul(10);
        return Array.from(predictedResults.dataSync());
      }

      $(async () => {
        console.log(tf.getBackend());
        //console.log('ml5 version:', ml5.version);
        const data = await $.get(`/Covid19s/GetTrainingData`);
        //const data = await $.getJSON('https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=MSFT&outputsize=full&apikey=demo')
        console.log(data);
        let daily = data['Time Series (Daily)'];
        let data_raw = [];
        let sma_vec = [];
        let window_size = 20;
        let trainingsize = 60;
        let index = 0;

          data.forEach(item => {
            data_raw.push({ timestamp: item.date, price: parseFloat(item.confirmed) });
            index++;
          });

        //for (let date in daily) {
        //  data_raw.push({ timestamp: date, price: parseFloat(daily[date]['4. close']) });
        //  index++;
        //}
        //data_raw.reverse();
        //console.log(data_raw);
        sma_vec = ComputeSMA(data_raw, window_size);
        console.log(sma_vec);
        let inputs = sma_vec.map(function (inp_f) {
          return inp_f['set'].map(function (val) { return val['price']; })
        });
        let outputs = sma_vec.map(function (outp_f) { return outp_f['avg']; });
        let n_epochs =20;
        let learningrate = 0.1;
        let n_hiddenlayers = 5;
        //console.log('trainModel',inputs, outputs)
        result = await trainModel(inputs, outputs, trainingsize, window_size, n_epochs, learningrate, n_hiddenlayers, callback);
        console.log(result);

        let testinputs = sma_vec.map(function (inp_f) {
          return inp_f['set'].map(function (val) { return val['price']; });
        });

        let testoutputs = sma_vec.map(function (outp_f) { return outp_f['avg']; });

        let outps = testoutputs.slice(Math.floor(trainingsize / 100 * testoutputs.length), testoutputs.length);

        let pred_vals = makePredictions(testinputs, trainingsize, result['model']);
        console.log(pred_vals, outps);
      })

    </script>*@
  <script>



    $(document).ready(async function () {
      var ionskin = "flat";
      //Manipulating interval
      var lang = "ja-JA";
      var year = 2020;

      function dateToTS(date) {
        return date.valueOf();
      }

      function tsToDate(ts) {
        var d = new Date(ts);

        return d.toLocaleDateString(lang,
          {
            year: 'numeric',
            month: 'numeric',
            day: 'numeric'
          });
      }
      const dt = moment().add(-2, 'days').format('YYYY-MM-DD');
      $("#demo_9").ionRangeSlider(
        {
          skin: ionskin,
          type: "double",
          grid: true,
          grid_num: 6,
          grid_snap: false,
          min: dateToTS(moment().startOf('year')),
          max: dateToTS(moment()),
          to: dateToTS(moment().add(-2, 'days')),
          prettify: tsToDate,
          onFinish: function (data) {
            updaterange(data.to)
          }
        });
      $("#demo_10").ionRangeSlider(
        {
          skin: ionskin,
          type: "double",
          grid: true,
          grid_num: 6,
          grid_snap: false,
          min: dateToTS(moment().startOf('year')),
          max: dateToTS(moment()),
          to: dateToTS(moment().add(-2, 'days')),
          prettify: tsToDate,
          onFinish: function (data) {
            updaterange2(data.to)
          }
        });
      $("#demo_11").ionRangeSlider(
        {
          skin: ionskin,
          type: "double",
          grid: true,
          grid_num: 6,
          grid_snap: false,
          min: dateToTS(moment().startOf('year')),
          max: dateToTS(moment()),
          to: dateToTS(moment().add(-2, 'days')),
          prettify: tsToDate,
          onFinish: function (data) {
            updaterange3(data.to)
          }
        });
      $("#demo_12").ionRangeSlider(
        {
          skin: ionskin,
          type: "double",
          grid: true,
          grid_num: 6,
          grid_snap: false,
          min: dateToTS(moment().startOf('year')),
          max: dateToTS(moment()),
          to: dateToTS(moment().add(-2, 'days')),
          prettify: tsToDate,
          onFinish: function (data) {
            updaterange4(data.to)
          }
        });

      async function updaterange(dt) {
        const data = await $.get(`/Covid19s/GetDataWithDate?dt=${moment(dt).format('YYYY-MM-DD')}`);
        //data.reverse();
        chart.changeData(data);
        chart.render();
      }
      async function updaterange2(dt) {
        const data = await $.get(`/Covid19s/GetSumDataWithRange?dt=${moment(dt).format('YYYY-MM-DD')}`);
        chart2.changeData(data);
        chart2.render();
      }
      async function updaterange3(dt) {
        const data = await $.get(`/Covid19s/GetSumDataWithChinaRange?dt=${moment(dt).format('YYYY-MM-DD')}`);
        chart3.changeData(data);
        chart3.render();
      }
      async function updaterange4(dt) {
        const data = await $.get(`/Covid19s/GetAreaDataWithDate?dt=${moment(dt).format('YYYY-MM-DD')}`);
        //chart4.changeData(data);
        //chart4.render();
        renderchart4(data)
      }

     

      const chart = new G2.Chart({
        container: 'container1',
        autoFit: true,
        height: 500,
      });
      const chart2 = new G2.Chart({
        container: 'container2',
        autoFit: true,
        height: 300,
      });
      const chart3 = new G2.Chart({
        container: 'container3',
        autoFit: true,
        height: 300,
      });
      const chart4 = new G2.Chart({
        container: 'container4',
        autoFit: true,
        height: 500,
      });
      const data = await $.get(`/Covid19s/GetDataWithDate?dt=${dt}`);
      //data.reverse();
      renderchart1(data);
      function renderchart1(data) {
        chart.data(data);
        chart.scale('confirmed',
          {
            alias: '确诊人数',
            nice: true,
            formatter: (value) => {
              return value.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            },
          });
        chart.coordinate()
          .transpose();

        chart.tooltip({
          showMarkers: false
        });
        chart.interaction('active-region');
        chart.interval().position('country*confirmed')
          .color('l(180) 0:#0050B3 1:#BAE7FF');
        chart.render();
      }

      const data2 = await $.get(`/Covid19s/GetSumDataWithRange?dt=${dt}`);
      renderchart2(data2);
      function renderchart2(data) {
        if (data.length == 0) {
          return
        }
        const last = data.slice(-1).pop();

        chart2.data(data);
        chart2.scale({
          date: {
            type: 'time',
            max: moment().add(-1, 'days').format('YYYY-MM-DD'),
            sync: true
          },
          confirmed: {
            alias: '确诊人数',
            min: 0,
            max: last.confirmed,
            sync: true,
            formatter: (value) => {
              return value.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            },
          },
          deaths: {
            alias: '死亡人数',
            min: 0,
            max: last.confirmed,
            sync: 'price',
            formatter: (value) => {
              return value.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            },
          },
          recovered: {
            alias: '康复人数',
            min: 0,
            max: last.confirmed,
            sync: 'price',
            formatter: (value) => {
              return value.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            },
          }
        });

        chart2.axis('deaths', false);
        chart2.axis('recovered', false);
        chart2.axis('price', {
          label: {
            textStyle: {
              fill: '#aaaaaa'
            },
            formatter: function formatter(text) {
              return text.replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            }
          }
        });

        chart2.interaction('active-region');
        chart2.tooltip({
          showCrosshairs: true,
          shared: true,
        });
        chart2.line().position('date*confirmed').color('#1890ff');
        chart2.line().position('date*deaths').color('#E53935');
        chart2.line().position('date*recovered').color('#2fc25b');
        chart2.annotation().dataMarker({
          top: true,
          position: ['2020-03-26', 529591],
          line: {
            length: 30,
          },
          text: {
            content: '2020-03-26, 全球疫情开始爆发确诊人数超过中国，确诊：529,591',
            style: {
              textAlign: 'right',
            }
          },
        });
        const { min, max } = findMaxMin(data);
        chart2.annotation().dataMarker({
          top: true,
          position: [max.date, max.confirmed],
          text: {
            content: '峰值：' + max.confirmed.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,'),
          },
          line: {
            length: 30,
          }
        });
        chart2.render();
      }

      const data3 = await $.get(`/Covid19s/GetSumDataWithChinaRange?dt=${dt}`);
      renderchart3(data3);
      function renderchart3(data) {
        if (data.length == 0) {
          return
        }
        const last = data.slice(-1).pop();

        chart3.data(data);
        chart3.scale({
          date: {
            alias:'日期',
            type: 'time',
            max: moment().add(-1, 'days').format('YYYY-MM-DD'),
            sync: true
          },
          confirmed: {
            alias: '确诊人数',
            min: 0,
            max: last.confirmed,
            sync: true,
            formatter: (value) => {
              return value.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            },
          },
          deaths: {
            alias: '死亡人数',
            min: 0,
            max: last.confirmed,
            sync: 'price',
            formatter: (value) => {
              return value.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            },
          },
          recovered: {
            alias: '康复人数',
            min: 0,
            max: last.confirmed,
            sync: 'price',
            formatter: (value) => {
              return value.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            },
          }
        });

        chart3.axis('deaths', false);
        chart3.axis('recovered', false);
        chart3.axis('price', {
          label: {
            textStyle: {
              fill: '#aaaaaa'
            },
            formatter: function formatter(text) {
              return text.replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');
            }
          }
        });

        chart3.interaction('active-region');
        chart3.tooltip({
          showCrosshairs: true,
          shared: true,
        });
        chart3.line().position('date*confirmed').color('#1890ff');
        chart3.line().position('date*deaths').color('#E53935');
        chart3.line().position('date*recovered').color('#2fc25b');
        chart3.annotation().dataMarker({
          top: true,
          position: ['2020-02-13', 59895],
          line: {
            length: 30,
          },
          text: {
            content: '2020-02-13, 将临床确诊纳入确诊人数，暴增：15,100',
            style: {
              textAlign: 'right',
            }
          },
        });
        chart3.annotation().dataMarker({
          top: true,
          position: ['2020-03-26', 81782],
          line: {
            length: 30,
          },
          text: {
            content: '2020-03-26, 全球疫情开始爆发确诊人数超过中国，确诊：529,591',
            style: {
              textAlign: 'right',
            }
          },
        });
        const { min, max } = findMaxMin(data);
        chart3.annotation().dataMarker({
          top: true,
          position: [max.date, max.confirmed],
          text: {
            content: '峰值：' + max.confirmed.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,'),
          },
          line: {
            length: 30,
          }
        });
        chart3.render();
      }


      const data4 = await $.get(`/Covid19s/GetAreaDataWithDate?dt=${dt}`);
      let mapData = await $.getJSON('https://g2.antv.vision/en/examples/data/world.geo.json');
      console.log(mapData)
      console.log(data4);
      renderchart4(data4);
      
      function renderchart4(data) {
        //if (data.length == 0) {
        //  return
        //}
        chart4.clear();
        chart4.scale({
          x: { sync: true },
          y: { sync: true },
          date: {
            alias: '日期'
          },
          country: {
            alias: '国家'
          },
          province: {
            alias: '省/州'
          },
          confirmed: {
            alias: '确诊人数'
          },
          recovered: {
            alias: '康复人数'
          },
          deaths: {
            alias: '死亡人数'
          },
        });
        chart4.coordinate('rect').reflect('y');
        chart4.legend(false);
        chart4.axis(false);

        // style the tooltip
        chart4.tooltip({
          showTitle: false,
          shared: true,
          showMarkers: false,
          containerTpl: '<div class="g2-tooltip"><table class="g2-tooltip-list"></table></div>',
          itemTpl: '<tr data-index="{index}"><td style="padding:5px;background-color:#886ab5;color:#fff">{name}</td><td style="padding:5px;background-color:#fff;color:#000;">{value}</td></tr>',
          domStyles: {
            'g2-tooltip': {
              borderRadius: '2px',
              backgroundColor: '#DDDDDD',
              padding: 0,
              border: '1px solid #e0e0e0'
            }
          }
        });
        // data set
        const ds = new DataSet();
        
        // draw the map
        const dv = ds.createView('back')
          .source(mapData, {
            type: 'GeoJSON'
          })
          .transform({
            type: 'geo.projection',
            projection: 'geoMercator',
            as: ['x', 'y', 'centroidX', 'centroidY']
          });
        const bgView = chart4.createView();
        bgView.data(dv.rows);
        bgView.tooltip(false);
        bgView.polygon()
          .position('x*y')
          .style({
            fill: '#DDDDDD',
            stroke: '#b1b1b1',
            lineWidth: 0.5,
            fillOpacity: 0.85
          });

        // draw the bubble plot
        const userData = ds.createView().source(data);
        userData.transform({
          type: 'map',
          callback: obj => {
            const projectedCoord = dv.geoProjectPosition([obj.longitude * 1, obj.latitude * 1], 'geoMercator');
            obj.x = projectedCoord[0];
            obj.y = projectedCoord[1];
            obj.deaths = obj.deaths * 1;
            obj.confirmed = obj.confirmed * 1;
            obj.recovered = obj.recovered * 1;
            return obj;
          }
        });
        const pointView = chart4.createView();
        pointView.data(userData.rows);
        pointView.point()
          .position('x*y')
          .size('confirmed', [3, 60])
          .shape('circle')
          .color('#FF2F29')
          .tooltip('date*country*province*confirmed*recovered*deaths')
          .style({
            fillOpacity: 0.45,
          })
          .state({
            active: {
              style: {
                lineWidth: 1,
                stroke: '#FF2F29'
              }
            }
          });
        pointView.interaction('element-active');
        chart4.render();
      }

      function findMaxMin(data) {
        let maxValue = 0;
        let minValue = 50000;
        let maxObj = null;
        let minObj = null;
        for (const d of data) {
          if (d.confirmed > maxValue) {
            maxValue = d.confirmed;
            maxObj = d;
          }
          if (d.confirmed < minValue) {
            minValue = d.confirmed;
            minObj = d;
          }
        }
        return { max: maxObj, min: minObj };
      }
    });
  </script>
}
