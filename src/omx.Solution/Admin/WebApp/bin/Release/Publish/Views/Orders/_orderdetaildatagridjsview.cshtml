
@model WebApp.Models.OrderDetail

<script type="text/javascript">
    //是否开启行内编辑
    const SUBEDITINLINE = false;
   //初始化 OrderDetail datagrid
   var $orderdetaildg = $('#orderdetail_datagrid');
   //当前行记录
   var orderdetail = {};
   //datagrid CRUD method
    var orderdetail_editIndex = undefined;
    //取消
    function orderdetail_reject() {
		$orderdetaildg.datagrid('rejectChanges');
		orderdetail_editIndex = undefined;

    }
    //重新加载数据
    function orderdetail_reload() {
			if (orderdetail_endEditing()) {
				$orderdetaildg.datagrid('reload');
			}
	}
    //关闭编辑状态
	function orderdetail_endEditing() {
			if (orderdetail_editIndex === undefined) {
                return true; 
            }
			if ($orderdetaildg.datagrid('validateRow', orderdetail_editIndex)) {
				$orderdetaildg.datagrid('endEdit', orderdetail_editIndex);
				orderdetail_editIndex = undefined;
                return true;
			} else {
				const invalidinput = $('input.validatebox-invalid',$orderdetaildg.datagrid('getPanel'));
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
				return false;
			}
		}
    //单击列开启编辑功能
	function orderdetail_onClickCell(index, field) {
			const _operates = ['_operate1', 'ck'];
             $('button[name*=\'orderdetaildeletebutton\']').prop('disabled', false);
			if (!SUBEDITINLINE || $.inArray(field, _operates) >= 0) {
				return false;
			}
			if (orderdetail_editIndex !== index) {
				if (orderdetail_endEditing()) {
					$orderdetaildg.datagrid('selectRow', index)
							.datagrid('beginEdit', index);
                    //orderdetail_editIndex = index;
					var ed = $orderdetaildg.datagrid('getEditor', { index: index, field: field });
					if (ed) {
						($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
					}
              
				} else {
					$orderdetaildg.datagrid('selectRow', orderdetail_editIndex);
				}
			}
		}
    //双击弹出编辑当前行对话框
    function orderdetail_onDblClickRow(index, row) {
        if (!SUBEDITINLINE) {
            open_orderdetaildlg(index, row, 'Modified');
        }
    }
    //订阅对话框新增返回事件
    $(document).on('orderdetail_form.add', (e, index,item) => {
        $orderdetaildg.datagrid("insertRow",
            {
                index: 0,
                row: item
            });

    });
    //订阅对话框修改返回事件
    $(document).on('orderdetail_form.edit', (e,index, item) => {
        $orderdetaildg.datagrid('updateRow', {
            index: index,
            row: item
        });
  
    });
    //新增记录
    function orderdetail_append() {
       const $orderform = $('#order_form');
       if ($orderform.form('enableValidation').form('validate')) {

          const order = $orderform.serializeJSON();
       const item = {
          Qty: 1, 

          OrderId:order.Id
        };
      if (!SUBEDITINLINE) {
        open_orderdetaildlg(0, item, 'Added');
      } else {
			if (orderdetail_endEditing()) {
				//对必填字段进行默认值初始化
				$orderdetaildg.datagrid('insertRow', 
                               { index: 0,
                                  row: item 
                               });
				orderdetail_editIndex = 0;
				$orderdetaildg.datagrid('selectRow', orderdetail_editIndex)
						.datagrid('beginEdit', orderdetail_editIndex);
			}
        }
        }
	 }
    //删除编辑的行
	function orderdetail_removeit() {
    if (orderdetail_editIndex !== undefined) {
      const delindex = orderdetail_editIndex;
      $orderdetaildg.datagrid('cancelEdit', delindex)
        .datagrid('deleteRow', delindex);

        } else {
           const row = $orderdetaildg.datagrid('getSelected');
           if(row){
             const rowindex = $orderdetaildg.datagrid('getRowIndex', row);
             $orderdetaildg.datagrid('deleteRow', rowindex);
   
           }else{
             $.messager.alert('提示', '没有选中删除的记录.', 'info');
           }
        }
	}
    //删除选中的行
    function orderdetail_deletechecked() {
            const rows = $orderdetaildg.datagrid('getChecked');
            if (rows.length > 0) {
                var id = rows.filter(item=>item.Id!=null).map(item => {
                    return item.Id;
                });
                $.messager.confirm('确认', `你确定要删除这 <span class='badge badge-icon position-relative'>${id.length}</span> 行记录?`,result => {
                    if (result) {
                        $.post('/OrderDetails/DeleteChecked', { id: id })
                         .done(response => {
                            if (response.success) {
                                $orderdetaildg.datagrid('reload');
                            } else {
                                $.messager.alert('错误', response.err,'error');
                            }
                         });
                    }
                });  
            } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
            }
      }
  //获取修改的行
  function orderdetail_getchanges() {
    if (orderdetail_endEditing()) {
      if ($orderdetaildg.datagrid('getChanges').length > 0) {
        const inserted = $orderdetaildg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const deleted = $orderdetaildg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3;
          return item;
        });
        const updated = $orderdetaildg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2;
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
          return !deleted.includes(item);
        })).concat(deleted);
        return { success: true, changed };
      } else {
        return { success: true, changed:undefined};
      }
    } else {
      return { success: false,changed:undefined };
    }
  }
  //提交修改的数据
  function orderdetail_acceptchanges() {
    $orderdetaildg.datagrid('acceptChanges');
  }
    //提交保存后台数据库
  function orderdetail_accept() {
    return new Promise((resolve, reject) => {
      if (orderdetail_endEditing()) {
        if ($orderdetaildg.datagrid('getChanges').length > 0) {
          const inserted = $orderdetaildg.datagrid('getChanges', 'inserted').map(item => {
            item.TrackingState = 1;
            return item;
          });
          const deleted = $orderdetaildg.datagrid('getChanges', 'deleted').map(item => {
            item.TrackingState = 3;
            return item;
          });
          const updated = $orderdetaildg.datagrid('getChanges', 'updated').map(item => {
            item.TrackingState = 2;
            return item;
          });
          //过滤已删除的重复项
          const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
          //console.table(changed);
          if (MODELSTATE === 'Added') {
            resolve({ success: true, changed });
          } else {
            $.post('/OrderDetails/SaveData', { orderdetails: changed })
              .done(response => {
                response.changed = undefined;
                resolve(response);
                //console.log(response);f
                if (response.success) {
                  toastr.success('保存成功');
                  $orderdetaildg.datagrid('acceptChanges');
                  $orderdetaildg.datagrid('reload');

                } else {
                  $.messager.alert('错误', response.err, 'error');
                }
              })
              .fail((jqXHR, textStatus, errorThrown) => {
                //console.log(errorThrown);
                resolve({ success: false, err: errorThrown });
                $.messager.alert('异常', errorThrown, 'error');
              });
          }
        } else {
          resolve({ success: true, changed: undefined });
        }
      } else {
        resolve({ success: false });
      }
    });
  }


  $(() => {
    $orderdetaildg.datagrid({
      rownumbers: true,
      iconCls: 'fa fa-list',
      idField: 'Id',
      sortName: 'Id',
      sortOrder: 'asc',
      remoteFilter: true,
      singleSelect: true,
      checkOnSelect: false,
      selectOnCheck: false,
      method: 'get',
      pageList: [10, 20, 50, 100],
      onDblClickRow: orderdetail_onDblClickRow,
      onClickCell: orderdetail_onClickCell,
      onSelect: function (index, row) {
        orderdetail = row;
      },
      onLoadSuccess: function (data) {
        orderdetail_editIndex = undefined;
      },
      onBeginEdit: function (index, row) {
        //const editors = $(this).datagrid('getEditors', index);
        const productid = $(this).datagrid('getEditor', { index: index, field: 'ProductId' });
        $(productid.target).combobox('options')
          .onSelect = (item) => {
            row['ProductId'] = item.Id;
            row['ProductName'] = item.Name;
          };
        $(productid.target).combobox('textbox')
          .bind('keydown', (e) => {
            if (e.keyCode === 13) {
              $(e.target).emulateTab();
            }
          });

      },
      onEndEdit: function (index, row) {

      },
      onBeforeEdit: function (index, row) {
        orderdetail_editIndex = index;
        row.editing = true;
        $(this).datagrid('refreshRow', index);

      },
      onAfterEdit: function (index, row) {
        row.editing = false;
        orderdetail_editIndex = undefined;
        $(this).datagrid('refreshRow', index);
      },
      onCancelEdit: function (index, row) {
        orderdetail_editIndex = undefined;
        row.editing = false;
        $(this).datagrid('refreshRow', index);
      },
      pagination: true,
      striped: true,
      columns: [[
        { field: 'Id', title: '<span class="required">@Html.DisplayNameFor(model => model.Id)</span>', width: 100, sortable: true, resizable: true, hidden: true },
        {   /*商品*/
          field: 'ProductId',
          title: '<span class="required">@Html.DisplayNameFor(model => model.ProductId)</span>',
          width: 160,
          sortable: true,
          resizable: true,
          hidden: false,
          formatter: function (value, row) {
            return row.ProductName;
          },
          editor: {
            type: 'combobox',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.ProductId)',
              mode: 'remote',
              editable: false,
              valueField: 'Id',
              textField: 'Name',
              method: 'get',
              url: '/Orders/GetProducts',
              required: true
            }
          }
        },
        {     /*需求数量*/
          field: 'Qty',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Qty)</span>',
          width: 100,
          align: 'right',
          editor: {
            type: 'numberbox',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Qty)',
              required: true,
              validType: 'integer',

            }
          },
          sortable: true,
          resizable: true,
          hidden: false,
          formatter: intformatter
        },
        {    /*单价*/
          field: 'Price',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Price)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberbox',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Price)',
              required: true,
              precision: 2,
              validType: 'decimal',

            }
          },
          sortable: true,
          resizable: true,
          formatter: numberformatter
        },
        {    /*金额(数量x单价)*/
          field: 'Amount',
          title: '<span class="required">@Html.DisplayNameFor(model => model.Amount)</span>',
          width: 100,
          align: 'right',
          hidden: false,
          editor: {
            type: 'numberbox',
            options: {
              prompt: '@Html.DisplayNameFor(model => model.Amount)',
              required: true,
              precision: 2,
              validType: 'decimal',

            }
          },
          sortable: true,
          resizable: true,
          formatter: numberformatter
        },
        {    /*备注*/
          field: 'Remark',
          title: '@Html.DisplayNameFor(model => model.Remark)',
          width: 120,
          editor: {
            type: 'textbox',
            options: { prompt: '@Html.DisplayNameFor(model => model.Remark)', required: false, validType: 'length[0,30]' }
          },
          sortable: true,
          hidden: false,
          resizable: true
        },
      ]]
    });
    //初始化 datagrid filter
    $orderdetaildg.datagrid('enableFilter', [
      {    /*需求数量*/
        field: 'Qty',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {    /*单价*/
        field: 'Price',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {    /*金额(数量x单价)*/
        field: 'Amount',
        type: 'numberbox',
        op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
      },
      {
        field: 'ProductId',
        type: 'combobox',
        options: {
          valueField: 'Id',
          textField: 'Name',
          method: 'get',
          url: '/Orders/GetProducts',
          onChange: function (value) {
            if (value == '') {
              $orderdetaildg.datagrid('removeFilterRule', 'ProductId');
            } else {
              $orderdetaildg.datagrid('addFilterRule', {
                field: 'ProductId',
                op: 'equal',
                value: value
              });
            }
            $orderdetaildg.datagrid('doFilter');
          }
        }
      },
    ]);
  });
      
</script>


 