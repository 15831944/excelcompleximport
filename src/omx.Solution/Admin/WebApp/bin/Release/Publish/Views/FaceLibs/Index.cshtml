@model WebApp.Models.FaceLib
@{

  ViewData["Title"] = "面部识别图库";
  ViewData["PageName"] = "FaceLib";
  ViewData["Heading"] = "<i class='fal fa-window text-primary'></i>  面部识别图库";
  ViewData["Category1"] = "Home";
  ViewData["PageDescription"] = "";
}
@section HeadBlock {
  <link href="@Fingerprint.Tag("/Content/css/notifications/toastr/toastr.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/easyui/themes/insdep/easyui.min.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/easyui/themes/insdep/icon.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Content/css/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader.min.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader-theme-dragdrop.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/font/font-fileuploader.css")" rel="stylesheet" />
  <link href="~/Scripts/plugin/fancybox/jquery.fancybox.min.css" rel="stylesheet" />
  <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
  <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css" rel="stylesheet">
  <style>
    canvas {
      position: absolute;
      top: 0;
      left: 0;
    }
  </style>
}

<div class="row">
  <div class="col-lg-12 col-xl-12">
    <div id="panel-1" class="panel">
      <div class="panel-hdr">
        <h2>
          面部识别图库
        </h2>
        <div class="panel-toolbar">
          <button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"><i class="fal fa-window-minimize"></i></button>
          <button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"><i class="fal fa-expand"></i></button>
          @*<button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-close" data-toggle="tooltip" data-offset="0,10" data-original-title="Close"><i class="fal fa-times"></i></button>*@
        </div>

      </div>
      <div class="panel-container show">
        <div class="panel-content py-2 rounded-bottom border-faded border-left-0 border-right-0  text-muted bg-faded bg-subtlelight-fade sticky-top">
          <div class="row no-gutters align-items-center">
            <div class="col">
              <!-- 开启授权控制请参考 @@if (Html.IsAuthorize("Create") -->
              <div class="btn-group btn-group-sm">
                <button onclick="importpic()" class="btn  btn-success"> <i class="fal fa-facebook"></i> 导入脸部照片 </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button onclick="showscanpic()" class="btn  btn-info"> <i class="fal fa-picture-o"></i> 扫描图片 </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button onclick="testdetect()" class="btn  btn-danger"> <i class="fal fa-eye"></i> 测试 </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button onclick="append()" class="btn btn-default"> <span class="fal fa-plus mr-1"></span> @Html.L("Add") </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="deletebutton" disabled onclick="removeit()" class="btn btn-default"> <span class="fal fa-times mr-1"></span> @Html.L("Delete") </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="savebutton" disabled onclick="accept()" class="btn btn-default"> <span class="fal fa-save mr-1"></span> @Html.L("Save") </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="cancelbutton" disabled onclick="reject()" class="btn btn-default"> <span class="fal fa-ban mr-1"></span> @Html.L("Cancel") </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button onclick="reload()" class="btn btn-default"> <span class="fal fa-search mr-1"></span> @Html.L("Refresh") </button>
              </div>
              <div class="btn-group btn-group-sm hidden-xs">
                <button type="button" onclick="importexcel('Employee')" class="btn btn-default"><span class="fal fa-cloud-upload mr-1"></span> @Html.L("Import") </button>
                <button type="button" class="btn btn-default dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu">
                  <a class="dropdown-item js-waves-on" href="javascript:importexcel('Employee')"><span class="fal fa-file-excel"></span>  @Html.L("Upload") </a>
                  <a class="dropdown-item js-waves-on" href="javascript:downloadtemplate()"><span class="fal fa-download"></span> @Html.L("Download") </a>
                </div>
              </div>
              <div class="btn-group btn-group-sm ">
                <button onclick="exportexcel()" class="btn btn-default"> <span class="fal fa-file-excel mr-1"></span>  @Html.L("Export") </button>
              </div>
              <div class="btn-group btn-group-sm ">
                <button onclick="dohelp()" class="btn btn-default"> <span class="fal fa-question-circle mr-1"></span> @Html.L("Help") </button>
              </div>
            </div>

          </div>

        </div>
        <div class="panel-content">
          <div class="table-responsive">
            <table id="facelibs_datagrid">
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
@{ Html.RenderPartial("_PopupDetailFormView", new WebApp.Models.FaceLib()); }
<!-- end detail popup window -->
<!-- END MAIN CONTENT -->
<div class="modal fade" id="importModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">上传图片</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

      </div>
      <div class="modal-body">
        <form id="uploadfiles-form" class="needs-validation" novalidate="">

          <div class="panel-content">
            <div class="form-row">
              <div class="col-md-6 mb-3">
                <label class="form-label" for="">标签 <span class="text-danger">*</span> </label>
                <input type="text" id="label" name="label" placeholder="标签" required>
              </div>
              <div class="col-md-6 mb-3">
                <label class="form-label" for="">描述   </label>
                <input type="text" id="description" name="description" placeholder="描述">
              </div>
            </div>
            <div class="form-row">
              <div class="col-md-12 mb-3">
                <input type="file"
                       class="filepond"
                       name="filepond"
                       multiple
                       data-max-file-size="50MB"
                       data-max-files="100">
              </div>
            </div>
          </div>




        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" onclick="uploadfiles()" class="btn btn-primary">上传</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div>

<div class="modal fade" id="scanModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">开始扫描图片</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

      </div>
      <div class="modal-body">
        <div class="row">
          <div class="superbox col-sm-12">

          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" onclick="dodetectlabel()" class="btn btn-primary">开始</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div>
<div class="modal fade" id="detectModal" tabindex="-1" role="dialog">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">识别图片</h4>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>

      </div>
      <div class="modal-body" id="picmodal">
        <img id="testpic" src="#" crossorigin="anonymous" style="width:100%">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" onclick="dodetectpic()" class="btn btn-primary">开始</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div>

@section ScriptsBlock {
  <script src="@Fingerprint.Tag("/Scripts/plugin/numeral/numeral.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/filesaver/FileSaver.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/filesaver/jquery.fileDownload.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/notifications/toastr/toastr.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/jquery.serializejson/jquery.serializejson.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/moment/moment-with-locales.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/jquery.easyui.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/datagrid-filter.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/columns-ext.js")"></script>
   <script src="@Fingerprint.Tag("/Scripts/formplugins/bootstrap-daterangepicker/bootstrap-daterangepicker.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.easyui.component.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.extend.formatter.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/columns-reset.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/locale/easyui-lang-zh_CN.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.custom.extend.js")"></script>

  <script src="~/Scripts/plugin/fancybox/jquery.fancybox.min.js"></script>
  <script src="https://unpkg.com/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.js"></script>
  <script src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
  <script src="https://unpkg.com/filepond-plugin-image-validate-size/dist/filepond-plugin-image-validate-size.js"></script>
  <script src="https://unpkg.com/filepond-plugin-image-exif-orientation/dist/filepond-plugin-image-exif-orientation.js"></script>
  <script src="https://unpkg.com/filepond-plugin-file-validate-size/dist/filepond-plugin-file-validate-size.js"></script>
  <script src="https://unpkg.com/filepond/dist/filepond.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.1/dist/jquery.validate.min.js"></script>
  <script src="~/Scripts/faceapi/face-api.min.js"></script>

  <script type="text/javascript">
      //是否强制从后台取值
      const REQUIRBACKEND = false;
      //是否开启行内编辑
      const EDITINLINE = true;
      //上传导入参数设定
      const entityname = "FaceLib";
    var facelib = {};

    function configFilePond() {
      FilePond.registerPlugin(
        FilePondPluginImagePreview,
        FilePondPluginImageExifOrientation,
        FilePondPluginFileValidateSize
      );
      FilePond.setOptions({
        instantUpload:false,
        server: {
          timeout: 7000,
          process: {
            url: '/FaceLibs/UploadFiles',
            method: 'POST',
            ondata: (formData) => {
              formData.append('label', $('#label').val());
              formData.append('description', $('#description').val());
              return formData;
            }
          },
          revert: '/FaceLibs/Revert',
        },

      })


    }
    configFilePond();
    //let pond;
    const inputElement = document.querySelector('input[type="file"]');
    const pond = FilePond.create(inputElement);
    function importpic() {
      $('#importModal').modal('toggle');
      $('#label').val('');
      $('#description').val('');
   }

    function uploadfiles() {
      if (pond) {
        var v = $('#uploadfiles-form').valid();
        var files = pond.getFiles();
        console.log(files, v);
        if (v && files.length > 0) {
          pond.processFiles().then(() => {
            $('#importModal').modal('toggle');
            reload();
            pond.removeFiles();
          });
        }
      }
    }

    //开始扫描图片加载标签
    function showscanpic() {
      $('.superbox').empty();
      $.get('/FaceLibs/GetImgData').done(res => {
        console.log(res);
        if (res) {
          $('#scanModal').modal('toggle');
          res.forEach(item => {
            const imgtag = ` <div class="superbox-list"><img src="${item.ImgUrl}"   alt="${item.Label}" title="${item.Label}" class="superbox-img"></div>`
            $('.superbox').append(imgtag)
          });
        }

      })


    }
    //读取人脸标签数据
    async function loadLabeledImages() {
      //获取人脸图片数据,包含：图片+标签
      const data = await $.get('/FaceLibs/GetImgData');
      //对图片按标签进行分类
      const labels = [...new Set(data.map(item => item.Label))]
      console.log(labels);
      return Promise.all(
        labels.map(async label => {
          const descriptions = []
          const imgs = data.filter(item => item.Label == label);
          for (let i = 0; i < imgs.length; i++) {
            const item = imgs[i];
            const img = await faceapi.fetchImage(`${item.ImgUrl}`)
            //console.log(item.ImgUrl, img);
            //const detections = await faceapi.detectSingleFace(img).withFaceLandmarks().withFaceDescriptor()
            //识别人脸的初始化参数
            const options = new faceapi.SsdMobilenetv1Options({ minConfidence:0.38})
            //const options = new faceapi.TinyFaceDetectorOptions()
            //const options = new faceapi.MtcnnOptions()
            //扫描图片中人脸的轮廓数据
            const detections = await faceapi.detectSingleFace(img, options).withFaceLandmarks().withFaceDescriptor()
            console.log(detections);
            if (detections) {
              descriptions.push(detections.descriptor)
            } else {
              console.warn('Unrecognizable face')
            }
          }
          console.log(label, descriptions);
          return new faceapi.LabeledFaceDescriptors(label, descriptions)
        })
      )

    }
    //开始扫描标签
    function dodetectlabel() {
      //加载训练好的模型（weight，bias）
      Promise.all([
        faceapi.nets.faceRecognitionNet.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.faceLandmark68Net.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.faceLandmark68TinyNet.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.ssdMobilenetv1.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.mtcnn.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        //faceapi.nets.tinyYolov.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights')
      ]).then(() => {
        loadLabeledImages().then(res => {
          console.log(res);
        })
      });
    }
    function dodetectpic() {
      $.messager.progress();
      //加载训练好的模型（weight，bias）
      Promise.all([
        faceapi.nets.faceRecognitionNet.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.faceLandmark68Net.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.faceLandmark68TinyNet.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.ssdMobilenetv1.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.tinyFaceDetector.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        faceapi.nets.mtcnn.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights'),
        //faceapi.nets.tinyYolov.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights')
      ]).then(async () => {
        //在原来图片容器中添加一层用于显示识别的蓝色框框
        const container = document.createElement('div')
        container.style.position = 'relative'
        $('#picmodal').prepend(container)
        //先加载维护好的人脸数据(人脸的特征数据和标签，用于后面的比对)
        const labeledFaceDescriptors = await loadLabeledImages()
        //比对人脸特征数据
        const faceMatcher = new faceapi.FaceMatcher(labeledFaceDescriptors, 0.6)
        //获取输入图片
        let image = document.getElementById('testpic')
        //根据图片大小创建一个图层，用于显示方框
        let canvas = faceapi.createCanvasFromMedia(image)
        //console.log(canvas);
        container.prepend(canvas)
        const displaySize = { width: image.width, height: image.height }
        faceapi.matchDimensions(canvas, displaySize)
        //设置需要使用什么算法和参数进行扫描识别图片的人脸特征
        const options = new faceapi.SsdMobilenetv1Options({ minConfidence: 0.38 })
        //const options = new faceapi.TinyFaceDetectorOptions()
        //const options = new faceapi.MtcnnOptions()
        //开始获取图片中每一张人脸的特征数据
        const detections = await faceapi.detectAllFaces(image, options).withFaceLandmarks().withFaceDescriptors()
        //根据人脸轮廓的大小，调整方框的大小
        const resizedDetections = faceapi.resizeResults(detections, displaySize)
        //开始和事先准备的标签库比对，找出最符合的那个标签
        const results = resizedDetections.map(d => faceMatcher.findBestMatch(d.descriptor))
        console.log(results)
        results.forEach((result, i) => {
          //显示比对的结果
          const box = resizedDetections[i].detection.box
          const drawBox = new faceapi.draw.DrawBox(box, { label: result.toString() })
          drawBox.draw(canvas)
          console.log(box, drawBox)
        })
        $.messager.progress('close');

      })

    }
    function testdetect() {
      $('#detectModal').modal('toggle');
    }
    //下载文件
    function downloadfile(id, index) {
      var doc = $dg.datagrid('getRows')[index];
      const url = `${doc.ImgUrl}`;

        $.fancybox.open([
          {
            src: url,
            opts: {
              caption: doc.FileName,
            }
          }]);

    }


       var editIndex = undefined;
       //重新加载数据
    function reload() {

      $dg.datagrid('uncheckAll');
      $dg.datagrid('reload');
      $("button[name*='deletebutton']").prop('disabled', true);
      $("button[name*='savebutton']").prop('disabled', true);
      $("button[name*='cancelbutton']").prop('disabled', true);

    }

    //删除编辑的行
	function removeit() {

		  deletechecked();

	}
  //删除该行
  function deleteRow(id) {
    $.messager.confirm('确认', '你确定要删除该记录?', result => {
      if (result) {
        dodeletechecked([id]);
      }
     });
  }
    //删除选中的行
    function deletechecked() {
        const id = $dg.datagrid('getChecked').filter(item=>item.Id!=null && item.Id > 0).map(item => {
                   return item.Id;
                });;
        if (id.length > 0) {
           $.messager.confirm('确认', `你确定要删除这 <span class='badge badge-icon position-relative'>${id.length} </span> 行记录?`, result => {
                if (result) {
                    dodeletechecked(id);
                    }
                });
         } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
         }
     }
    //执行删除
    function dodeletechecked(id){
       $.post('/FaceLibs/DeleteChecked', { id: id })
                         .done(response => {
                                if (response.success) {
                                    toastr.error(`成功删除[${id.length}]行记录`);
                                    reload();
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
						     $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					      });
    }
    //提交保存后台数据库




    //初始化定义datagrid
    var $dg = $('#facelibs_datagrid');
    $(() => {
      //定义datagrid结构
      $dg.datagrid({
        rownumbers: true,
        checkOnSelect: false,
        selectOnCheck: false,
        idField: 'Id',
        sortName: 'Id',
        sortOrder: 'desc',
        remoteFilter: true,
        singleSelect: true,
        url: '/FaceLibs/GetData',
        method: 'get',
        pagination: true,
         clientPaging: false,
        striped: true,
        onHeaderContextMenu: function (e, field) {
          e.preventDefault();
          $(this).datagrid('columnMenu').menu('show', {
            left: e.pageX,
            top: e.pageY
          });
        },
        onBeforeLoad: function () {
          //datagrid resize when jarvisWidgets resized.
          const that = $(this);
          $(window).on("resize.jarvisWidgets", () => {
            that.datagrid('resize');
          })
        },
        onLoadSuccess: function (data) {
          editIndex = undefined;
        },
        onCheck: function () {
          $("button[name*='deletebutton']").prop('disabled', false);
        },
        onUncheck: function () {
          const checked = $(this).datagrid('getChecked').length > 0;
          $("button[name*='deletebutton']").prop('disabled', !checked);
        },
        onSelect: function (index, row) {
          facelib = row;
        },
        onBeginEdit: function (index, row) {
          //const editors = $(this).datagrid('getEditors', index);

        },
        onEndEdit: function (index, row) {

        },
        onBeforeEdit: function (index, row) {
          editIndex = index;
          row.editing = true;
          $("button[name*='deletebutton']").prop('disabled', false);
          $("button[name*='cancelbutton']").prop('disabled', false);
          $("button[name*='savebutton']").prop('disabled', false);
          $(this).datagrid('refreshRow', index);
        },
        onAfterEdit: function (index, row) {
          row.editing = false;
          editIndex = undefined;
          $(this).datagrid('refreshRow', index);
        },
        onCancelEdit: function (index, row) {
          row.editing = false;
          editIndex = undefined;
          $("button[name*='deletebutton']").prop('disabled', true);
          $("button[name*='savebutton']").prop('disabled', true);
          $("button[name*='cancelbutton']").prop('disabled', true);
          $(this).datagrid('refreshRow', index);
        },
        frozenColumns: [[
          /*开启CheckBox选择功能*/
          { field: 'ck', checkbox: true },
          {
            field: 'action',
            title: '@Html.L("Command")',
            width: 85,
            sortable: false,
            resizable: true,
            formatter: function showdetailsformatter(value, row, index) {
              if (!row.editing) {
                return `<div class="btn-group">\
                       <button onclick="downloadfile('${row.Id}',  ${index})" class="btn btn-default btn-xs" title="下载附件" ><i class="fa fa-download"></i> </button>\
                        <button onclick="deleteRow('${row.Id}',${index})" class="btn btn-default btn-xs" title="删除记录" ><i class="fa fa-trash-o"></i> </button>\
                     </div>`;
              } else {
                return `<button class="btn btn-default btn-xs" disabled title="查看明细"  ><i class="fa fa-pencil-square-o"></i> </button>`;
              }
            }
          }
        ]],
        columns: [[
          { /*Id*/
            field: 'Id',
            title: '<span class="required">@Html.DisplayNameFor(model => model.Id)</span>',
            width: 120,
            sortable: true,
            resizable: true,
            hidden: true
          },
          {    /*标签*/
            field: 'Label',
            title: '@Html.DisplayNameFor(model => model.Label)',
            width: 150,
            hidden: false,
            editor: {
              type: 'textbox',
              options: { prompt: '@Html.DisplayNameFor(model => model.Label)', required: false, validType: 'length[0,50]' }
            },
            sortable: true,
            resizable: true
          },
          {    /*描述*/
            field: 'Description',
            title: '@Html.DisplayNameFor(model => model.Description)',
            width: 180,
            hidden: false,
            editor: {
              type: 'textbox',
              options: { prompt: '@Html.DisplayNameFor(model => model.Description)', required: false, validType: 'length[0,50]' }
            },
            sortable: true,
            resizable: true
          },
          {    /*存放路径*/
            field: 'ImgPath',
            title: '@Html.DisplayNameFor(model => model.ImgPath)',
            width: 200,
            hidden: false,
            editor: {
              type: 'textbox',
              options: { prompt: '@Html.DisplayNameFor(model => model.ImgPath)', required: false, validType: 'length[0,50]' }
            },
            sortable: true,
            resizable: true
          },
          {    /*访问地址*/
            field: 'ImgUrl',
            title: '@Html.DisplayNameFor(model => model.ImgUrl)',
            width: 250,
            hidden: false,
            editor: {
              type: 'textbox',
              options: { prompt: '@Html.DisplayNameFor(model => model.ImgUrl)', required: false, validType: 'length[0,50]' }
            },
            sortable: true,
            resizable: true
          },

        ]]
      }).datagrid('columnMoving')
        .datagrid('resetColumns');

      $dg.datagrid('enableFilter', [
        {   /*Id*/
          field: 'Id',
          type: 'numberbox',
          op: ['equal', 'notequal', 'less', 'lessorequal', 'greater', 'greaterorequal']
        },
      ]);
    });

  </script>

}


