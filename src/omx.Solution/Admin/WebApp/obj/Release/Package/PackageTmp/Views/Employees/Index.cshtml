@model WebApp.Models.Employee
@{
  ViewData["Title"] = "Employee";
  ViewData["PageName"] = "Department";
  ViewData["Heading"] = "<i class='fal fa-window text-primary'></i>  Employee";
  ViewData["Category1"] = "Home";
  ViewData["PageDescription"] = "";
}
@section HeadBlock {
  <link href="@Fingerprint.Tag("/Content/css/notifications/toastr/toastr.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/easyui/themes/insdep/easyui.min.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/easyui/themes/insdep/icon.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/plugin/daterangepicker/daterangepicker.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader.min.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader-theme-dragdrop.css")" rel="stylesheet" />
  <link href="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/font/font-fileuploader.css")" rel="stylesheet" />
}
<div class="row">
  <div class="col-lg-12 col-xl-12">
    <div id="panel-1" class="panel">
      <div class="panel-hdr">
        <h2>
          Employee
        </h2>
        <div class="panel-toolbar">
          <button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-collapse" data-toggle="tooltip" data-offset="0,10" data-original-title="Collapse"><i class="fal fa-window-minimize"></i></button>
          <button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-fullscreen" data-toggle="tooltip" data-offset="0,10" data-original-title="Fullscreen"><i class="fal fa-expand"></i></button>
          @*<button class="btn btn-panel bg-transparent fs-xl w-auto h-auto rounded-0" data-action="panel-close" data-toggle="tooltip" data-offset="0,10" data-original-title="Close"><i class="fal fa-times"></i></button>*@
        </div>

      </div>
      <div class="panel-container show">
        <div class="panel-content py-2 rounded-bottom border-faded border-left-0 border-right-0  text-muted bg-faded bg-subtlelight-fade sticky-top">
          <div class="row no-gutters align-items-center">
            <div class="col">
              <!-- 开启授权控制请参考 @@if (Html.IsAuthorize("Create") -->
              <div class="btn-group btn-group-sm">
                <button onclick="append()" class="btn btn-default"> <span class="fal fa-plus mr-1"></span> @Html.L("Add") </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="deletebutton" disabled onclick="removeit()" class="btn btn-default"> <span class="fal fa-times mr-1"></span> @Html.L("Delete") </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="savebutton" disabled onclick="accept()" class="btn btn-default"> <span class="fal fa-save mr-1"></span> @Html.L("Save") </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button name="cancelbutton" disabled onclick="reject()" class="btn btn-default"> <span class="fal fa-ban mr-1"></span> @Html.L("Cancel") </button>
              </div>
              <div class="btn-group btn-group-sm">
                <button onclick="reload()" class="btn btn-default"> <span class="fal fa-search mr-1"></span> @Html.L("Refresh") </button>
              </div>
              <div class="btn-group btn-group-sm hidden-xs">
                <button type="button" onclick="importexcel('Employee')" class="btn btn-default"><span class="fal fa-cloud-upload mr-1"></span> @Html.L("Import") </button>
                <button type="button" class="btn btn-default dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                  <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu">
                  <a class="dropdown-item js-waves-on" href="javascript:downloadtemplate()"><span class="fal fa-download"></span> @Html.L("Download") </a>
                </div>
              </div>
              <div class="btn-group btn-group-sm ">
                <button onclick="exportexcel()" class="btn btn-default"> <span class="fal fa-file-excel mr-1"></span>  @Html.L("Export") </button>
              </div>
              <div class="btn-group btn-group-sm ">
                <button onclick="dohelp()" class="btn btn-default"> <span class="fal fa-question-circle mr-1"></span> @Html.L("Help") </button>
              </div>
            </div>
            
          </div>

        </div>
        <div class="panel-content">
          <div class="table-responsive">
            <table id="employees_datagrid">
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@{ Html.RenderPartial("_ImportWindow", new ViewDataDictionary { { "EntityName", "Employee" } }); }

@{ Html.RenderPartial("_PopupDetailFormView", new WebApp.Models.Employee()); }




@section ScriptsBlock {
  <script src="@Fingerprint.Tag("/Scripts/plugin/numeral/numeral.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/filesaver/FileSaver.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/filesaver/jquery.fileDownload.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/notifications/toastr/toastr.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/jquery.serializejson/jquery.serializejson.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/moment/moment-with-locales.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/jquery.fileuploader/jquery.fileuploader.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/jquery.easyui.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/datagrid-filter.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/columns-ext.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/plugin/daterangepicker/daterangepicker.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.easyui.component.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.extend.formatter.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/plugins/columns-reset.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/easyui/locale/easyui-lang-zh_CN.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.custom.extend.js")"></script>
  <script type="text/javascript">
      //是否强制从后台取值
      const REQUIRBACKEND = false;
      //是否开启行内编辑
      const EDITINLINE = false;
      var employee = {};

      //下载Excel导入模板
      function downloadtemplate() {
          //默认模板路径存放位置
          const url = '/FileUpload/Download?file=/ExcelTemplate/Employee.xlsx';
          $.fileDownload(url)
           .done(() => {
                    //console.log('file download a success!');
                    toastr.success('模板下载完成!');
                })
           .fail(() => {
               $.messager.alert('下载模板失败','没有下载到导入模板[Employee.xlsx]文件!','error');
            });
       }
       //打印
       function print() {
            $dg.datagrid('print', 'DataGrid');
       }
       //执行导出下载Excel
       function exportexcel() {
                const filterRules = JSON.stringify($dg.datagrid('options').filterRules);
                //console.log(filterRules);
                $.messager.progress({ title: '正在执行导出!' });
                let formData = new FormData();
                formData.append('filterRules', filterRules);
                formData.append('sort', 'Id');
                formData.append('order', 'asc');
                $.postDownload('/Employees/ExportExcel', formData).then(res => {
                    $.messager.progress('close');
                    toastr.success('导出成功!');
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress('close');
                    $.messager.alert('导出失败', err.statusText, 'error');
                });

        }
        //显示帮助信息
        function dohelp() {
            toastr.info('有问题请联系管理员 <br><i class="fa fa-envelope-o" aria-hidden="true"></i> : demo@admin.com','帮助');
        }
       var editIndex = undefined;
       //重新加载数据
       function reload() {
            if (EDITINLINE && endEditing()) {
                $dg.datagrid('uncheckAll');
                $dg.datagrid('reload');
            } else if (!EDITINLINE) {
                $dg.datagrid('uncheckAll');
                $dg.datagrid('reload');
            }
       }
      //关闭编辑状态
      function endEditing() {
            if (editIndex === undefined) {
                return true;
            }
            if ($dg.datagrid('validateRow', editIndex)) {
                $dg.datagrid('endEdit', editIndex);
                return true;
            } else {
                const invalidinput = $('input.validatebox-invalid',$dg.datagrid('getPanel'));
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
                return false;
            }
        }
    //单击列开启编辑功能
    function onClickCell(index, field) {
        employee = $dg.datagrid('getRows')[index];
        const _actions = ['action', 'ck'];
        if (!EDITINLINE || $.inArray(field, _actions) >= 0) {
                return;
        }
        if (editIndex !== index) {
            if (endEditing()) {
                $dg.datagrid('selectRow', index)
                   .datagrid('beginEdit', index);
                hook = true;
                editIndex = index;
                const ed = $dg.datagrid('getEditor', { index: index, field: field });
                if (ed) {
                        ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
                }
            } else {
                $dg.datagrid('selectRow', editIndex);
            }
        }
    }
    //新增记录
    async function append() {
       employee = { Title: '员工',
Sex: '男',
Age: 25,
Brithday: '1995/10/10',
EntryDate: moment().format('YYYY-MM-DD HH:mm:ss'),
IsDeleted: false,
LeaveDate: null,
CompanyId: 1,
DepartmentId: null,
 };
        //需要后台创建对象
       if (REQUIRBACKEND) {
         employee = await $.get('/Employees/NewItem');
       }
        if (!EDITINLINE) {
           //弹出新增窗口
           openemployeedetailwindow(employee, 'Added');
        } else {
            if (endEditing()) {
                //对必填字段进行默认值初始化
                $dg.datagrid('insertRow',
                              {
                                  index: 0,
                                  row: employee
                               });
                editIndex = 0;
                $dg.datagrid('selectRow', editIndex)
                    .datagrid('beginEdit', editIndex);
                hook = true;
            }
        }
    }
    //删除编辑的行
    function removeit() {
       if (EDITINLINE) {
          if (editIndex !== undefined) {
             $dg.datagrid('cancelEdit', editIndex)
                .datagrid('deleteRow', editIndex);
               editIndex = undefined;
               hook = true;
               $("button[name*='savebutton']").prop('disabled', false);
               $("button[name*='cancelbutton']").prop('disabled', false);
           }else{
              const rows = $dg.datagrid('getChecked');
              rows.slice().reverse().forEach(row => {
                const rowindex = $dg.datagrid('getRowIndex', row);
                $dg.datagrid('deleteRow', rowindex);
                hook = true;
                $("button[name*='savebutton']").prop('disabled', false);
                $("button[name*='cancelbutton']").prop('disabled', false);
            });
           }
        } else {
          deletechecked();
        }
    }
  //删除该行
  function deleteRow(id) {
    $.messager.confirm('确认', '你确定要删除该记录?', result => {
      if (result) {
        dodeletechecked([id]);
      }
     });
  }
    //删除选中的行
    function deletechecked() {
        const id = $dg.datagrid('getChecked').filter(item=>item.Id!=null && item.Id > 0).map(item => {
                   return item.Id;
                });;
        if (id.length > 0) {
           $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length} </span> 行记录?`, result => {
                if (result) {
                    dodeletechecked(id);
                    }
                });
         } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
         }
     }
    //执行删除
    function dodeletechecked(id){
       $.post('/Employees/DeleteChecked', { id: id })
                         .done(response => {
                                if (response.success) {
                                    toastr.error(`成功删除[${id.length}]行记录`);
                                    reload();
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
                             $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                          });
    }
    //提交保存后台数据库
    function accept() {
      if (endEditing()) {
        if ($dg.datagrid('getChanges').length > 0) {
          const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const updated = $dg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2
          return item;
        });
        const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
        //console.table(changed);
        $.messager.progress({ title: '请等待', msg: '正在保存数据...', interval:200});
        $.post('/Employees/SaveData', {employees:changed})
                     .done(response => {
                     $.messager.progress('close');
                           //console.log(response);
                           if (response.success) {
                               toastr.success('保存成功');
                               $dg.datagrid('acceptChanges');
                               reload();
                               hook = false;
                           } else {
                               $.messager.alert('错误', response.err ,'error');
                           }
                        })
                      .fail((jqXHR, textStatus, errorThrown) => {
                        $.messager.progress('close');
                        $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
                      });
                }
            }
    }
    function reject() {
        $dg.datagrid('rejectChanges');
        editIndex = undefined;
        hook = false;
    }
    function getChanges() {
        const rows = $dg.datagrid('getChanges');
        //console.log(rows.length + ' rows are changed!');
    }
    //弹出明细信息
    async function showdetailswindow(id,index) {
        const employee = $dg.datagrid('getRows')[index];
        if (REQUIRBACKEND) {
           employee = await $.get('/Employees/GetItem/' + id);
        }
        openemployeedetailwindow(employee,'Modified');
    }

    //初始化定义datagrid
    var $dg = $('#employees_datagrid');
    $(() => {
        //定义datagrid结构
       $dg.datagrid({
                        rownumbers:true,
                        checkOnSelect:false,
                        selectOnCheck:false,
                        idField:'Id',
                        sortName:'Id',
                        sortOrder:'desc',
                        remoteFilter: true,
                        singleSelect: false,
                        url: '/Employees/GetData',
                        method: 'get',
                        onClickCell: onClickCell,
                        pagination: true,
                        clientPaging:false,
                        striped:true,
                        pageList: [10, 20, 50, 100, 500],
                        onHeaderContextMenu: function (e, field) {
                           e.preventDefault();
                           $(this).datagrid('columnMenu').menu('show', {
                             left: e.pageX,
                             top: e.pageY
                           });
                        },
                        onBeforeLoad: function () {
                           const that = $(this);
                           document.addEventListener('smartPanel.onFullscreen', () => {
                              setTimeout(() => {
                                that.datagrid('resize');
                              },200)
                           })
                         },
                        onLoadSuccess: function (data) {
                           editIndex = undefined;
                           $("button[name*='deletebutton']").prop('disabled', true);
                           $("button[name*='savebutton']").prop('disabled', true);
                           $("button[name*='cancelbutton']").prop('disabled', true);
                        },
                        onCheck: function () {
                          $("button[name*='deletebutton']").prop('disabled', false);
                        },
                        onUncheck: function () {
                           const checked = $(this).datagrid('getChecked').length > 0;
                           $("button[name*='deletebutton']").prop('disabled', !checked);
                        },
                        onSelect: function(index,row) {
                           employee = row;
                        },
                        onBeginEdit: function (index, row) {
                          //const editors = $(this).datagrid('getEditors', index);
                         const companyid = $(this).datagrid('getEditor', { index: index, field: 'CompanyId' });
                         $(companyid.target).combobox('options')
                             .onSelect = (item) => {
                               row['CompanyId'] = item.Id;
                               row['CompanyName'] = item.Name;
                            };
                         $(companyid.target).combobox('textbox').bind('keydown', function (e) {
                           if (e.keyCode === 13) {
                             $(e.target).emulateTab();
                           }
                          });
                         const departmentid = $(this).datagrid('getEditor', { index: index, field: 'DepartmentId' });
                         $(departmentid.target).combobox('options')
                             .onSelect = (item) => {
                               row['DepartmentId'] = item.Id;
                               row['DepartmentName'] = item.Name;
                            };
                         $(departmentid.target).combobox('textbox').bind('keydown', function (e) {
                           if (e.keyCode === 13) {
                             $(e.target).emulateTab();
                           }
                          });

                         },
                        onEndEdit: function (index, row) {

                         },
                         onBeforeEdit: function (index, row) {
                            editIndex = index;
                            row.editing = true;
                            $("button[name*='deletebutton']").prop('disabled', false);
                            $("button[name*='cancelbutton']").prop('disabled', false);
                            $("button[name*='savebutton']").prop('disabled', false);
                            $(this).datagrid('refreshRow', index);
                          },
                          onAfterEdit: function (index, row) {
                            row.editing = false;
                            editIndex = undefined;
                            $(this).datagrid('refreshRow', index);
                           },
                           onCancelEdit: function (index, row) {
                             row.editing = false;
                             editIndex = undefined;
                             $("button[name*='deletebutton']").prop('disabled', true);
                             $("button[name*='savebutton']").prop('disabled', true);
                             $("button[name*='cancelbutton']").prop('disabled', true);
                             $(this).datagrid('refreshRow', index);
                         },
                        frozenColumns: [[
                         /*开启CheckBox选择功能*/
                         { field: 'ck', checkbox: true },
                         {
                            field: 'action',
                            title:'@Html.L("Command")',
                            width: 85,
                            sortable: false,
                            resizable: true,
                            formatter: function showdetailsformatter(value, row, index) {
                                         if (!row.editing) {
                                            return `<div class="btn-group">\
                                                         <button onclick="showdetailswindow('${row.Id}',  ${index})" class="btn btn-primary btn-sm btn-icon waves-effect waves-themed" data-toggle="tooltip" data-placement="right" title="@Html.L("EditDetail")" ><i class="fal fa-edit"></i> </button>\
                                                         <button onclick="deleteRow('${row.Id}',${index})" class="btn btn-primary btn-sm btn-icon waves-effect waves-themed" data-toggle="tooltip" data-placement="right" title="@Html.L("Delete")" ><i class="fal fa-times"></i> </button>\
                                                    </div>`;
                                         } else {
                                             return `<button class="btn btn-primary btn-sm btn-icon waves-effect waves-themed" disabled title="查看明细"  ><i class="fa fa-edit"></i> </button>`;
                                         }
                                     }
                          }
                        ]],
                        columns: [[
             { /*Id*/
               field:'Id',
               title:'<span class="required">@Html.DisplayNameFor(model => model.Id)</span>',
               width:120 ,
               sortable:true,
               resizable:true,
               hidden:true
              },
            {    /*姓名*/
                 field:'Name',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Name)</span>',
                 width:120,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Name)',required:true, validType: 'length[0,20]' }
                       },
                 sortable:true,
                 resizable:true
            },
            {    /*职位*/
                 field:'Title',
                 title:'@Html.DisplayNameFor(model => model.Title)',
                 width:120,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Title)',required:false, validType: 'length[0,30]' }
                       },
                 sortable:true,
                 resizable:true
            },
            {    /*联系电话*/
                 field:'PhoneNumber',
                 title:'@Html.DisplayNameFor(model => model.PhoneNumber)',
                 width:120,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.PhoneNumber)',required:false, validType: 'length[0,30]' }
                       },
                 sortable:true,
                 resizable:true
            },
            {    /*微信*/
                 field:'WX',
                 title:'@Html.DisplayNameFor(model => model.WX)',
                 width:120,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.WX)',required:false, validType: 'length[0,30]' }
                       },
                 sortable:true,
                 resizable:true
            },
            {    /*性别*/
                 field:'Sex',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Sex)</span>',
                 width:120,
                 hidden:false,
                 editor:{
                          type:'textbox',
                          options:{ prompt:'@Html.DisplayNameFor(model => model.Sex)',required:true, validType: 'length[0,10]' }
                       },
                 sortable:true,
                 resizable:true
            },
           {     /*年龄*/
                 field:'Age',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Age)</span>',
                 width:100,
                 align:'right',
                 hidden:false,
                 editor:{
                        type:'numberspinner',
                        options:{prompt:'@Html.DisplayNameFor(model => model.Age)',
                                 required:true,

                                }
                        },
                formatter:intformatter,
                sortable:true,
                resizable:true
            },
            {   /*出生日期*/
                field:'Brithday',
                title:'<span class="required">@Html.DisplayNameFor(model => model.Brithday)</span>',
                width:100,
                align:'right',
                hidden:false,
                editor:{
                      type:'datebox',
                      options:{prompt:'@Html.DisplayNameFor(model => model.Brithday)',required:true}
                      },
                formatter:dateformatter,
                sortable:true,
                resizable:true
            } ,
            {   /*入职日期*/
                field:'EntryDate',
                title:'<span class="required">@Html.DisplayNameFor(model => model.EntryDate)</span>',
                width:100,
                align:'right',
                hidden:false,
                editor:{
                      type:'datebox',
                      options:{prompt:'@Html.DisplayNameFor(model => model.EntryDate)',required:true}
                      },
                formatter:dateformatter,
                sortable:true,
                resizable:true
            } ,
            {  /*是否已离职*/
               field:'IsDeleted',
               title:'<span class="required">@Html.DisplayNameFor(model => model.IsDeleted)</span>',
               width:90,
               align:'center',
               hidden:false,
               editor:{
                      type:'checkbox',
                      options:{
                                 prompt:'@Html.DisplayNameFor(model => model.IsDeleted)',
                                 required:true
                               }
                      },
                formatter:checkboxformatter,
                sortable:true,
                resizable:true
            },
            {   /*离职日期*/
                field:'LeaveDate',
                title:'@Html.DisplayNameFor(model => model.LeaveDate)',
                width:100,
                align:'right',
                hidden:false,
                editor:{
                      type:'datebox',
                      options:{prompt:'@Html.DisplayNameFor(model => model.LeaveDate)',required:false}
                      },
                formatter:dateformatter,
                sortable:true,
                resizable:true
            } ,
            {   /*公司*/
                field:'CompanyId',
                title:'<span class="required">@Html.DisplayNameFor(model => model.CompanyId)</span>',
                width:160,
                sortable:true,
                resizable:true,
                hidden:false,
                formatter:(value,row) => {
                        return row.CompanyName;
                    },
                editor:{
                        type:'combobox',
                        options:{
                                prompt:'@Html.DisplayNameFor(model => model.CompanyId)' ,
                                mode: 'remote',
                                editable: false,
                                valueField:'Id',
                                textField:'Name',
                                method:'get',
                                url:'/Employees/GetCompanies',
                                required:true
                            }
                        }
            },
            {   /*部门*/
                field:'DepartmentId',
                title:'<span class="required">@Html.DisplayNameFor(model => model.DepartmentId)</span>',
                width:160,
                sortable:true,
                resizable:true,
                hidden:false,
                formatter:(value,row) => {
                        return row.DepartmentName;
                    },
                editor:{
                        type:'combobox',
                        options:{
                                prompt:'@Html.DisplayNameFor(model => model.DepartmentId)' ,
                                mode: 'remote',
                                editable: false,
                                valueField:'Id',
                                textField:'Name',
                                method:'get',
                                url:'/Employees/GetDepartments',
                                required:true
                            }
                        }
            },
                 ]]
           }).datagrid('columnMoving')
             .datagrid('resetColumns');

           $dg.datagrid('enableFilter',[
                {   /*Id*/
                      field: 'Id',
                      type: 'numberbox',
                      op:['equal','notequal','less','lessorequal','greater','greaterorequal']
                  },
                {   /*年龄*/
                      field: 'Age',
                      type: 'numberbox',
                      op:['equal','notequal','less','lessorequal','greater','greaterorequal']
                  },
                {     /*出生日期*/
                      field: 'Brithday',
                      type: 'dateRange',
                      options: {
                      }
                  },
                {     /*入职日期*/
                      field: 'EntryDate',
                      type: 'dateRange',
                      options: {
                      }
                  },
                {     /*离职日期*/
                      field: 'LeaveDate',
                      type: 'dateRange',
                      options: {
                      }
                  },
                {   /*是否已离职*/
                      field: 'IsDeleted',
                      type: 'booleanfilter'
                 },
           {   /*公司*/
                 field: 'CompanyId',
                 type:'combobox',
                 options:{
                                valueField:'Id',
                                textField:'Name',
                                method:'get',
                                url:'/Employees/GetCompanies',
                                onChange: value => {
                                if (value === '' || value === null) {
                                    $dg.datagrid('removeFilterRule', 'CompanyId');
                                } else {
                                    $dg.datagrid('addFilterRule', {
                                        field: 'CompanyId',
                                        op: 'equal',
                                        value: value
                                });
                            }
                            $dg.datagrid('doFilter');
                        }
                    }
           },
           {   /*部门*/
                 field: 'DepartmentId',
                 type:'combobox',
                 options:{
                                valueField:'Id',
                                textField:'Name',
                                method:'get',
                                url:'/Employees/GetDepartments',
                                onChange: value => {
                                if (value === '' || value === null) {
                                    $dg.datagrid('removeFilterRule', 'DepartmentId');
                                } else {
                                    $dg.datagrid('addFilterRule', {
                                        field: 'DepartmentId',
                                        op: 'equal',
                                        value: value
                                });
                            }
                            $dg.datagrid('doFilter');
                        }
                    }
           },
           ]);
     });

  </script>



}


